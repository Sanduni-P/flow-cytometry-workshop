{"title":"Basics of working with FCS files","markdown":{"yaml":{"title":"Basics of working with FCS files","output":"rmarkdown::html_vignette","vignette":"%\\VignetteIndexEntry{Basics of working with FCS files} %\\VignetteEngine{knitr::rmarkdown} %\\VignetteEncoding{UTF-8}\n"},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nFlow cytometry data (regardless of the type of instrument used) is generally saved as a **.fcs** file. This file is populated with raw data, fluorescence intensity (for optics based technologies) and abundance (for mass cytrometry), as well as various metadata including: *user id*, *instrument id*, *dynamic range of instrument*, etc. It is important to be able to interact with and manipulate the **.fcs** file as it gives the users/analysts fine grain control.\n\n## Installing/loading required libraries\n\nYou can install all the required packages as follows:\n\n```{r install_libraries, echo=TRUE, eval=FALSE, message=FALSE}\nif (!require(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\n\nBiocManager::install(c(\"cytolib\", \"flowCore\", \"flowWorkspace\", \"ggcyto\", \n                       \"openCyto\", \"flowStats\", \"CytoML\", \"flowClust\",\n                       \"flowClean\", \"flowAI\", \"PeacoQC\"))\n```\n\nFor the moment, we only need to load `flowCore` and `flowWorkspace`.\n\n```{r load_library_download_cache, eval=TRUE, echo=TRUE, message = FALSE, warning = FALSE}\nlibrary(flowCore)\nlibrary(flowWorkspace)\n```\n\n## FlowRepository workshop data\n\nIn this workshop we will demonstrate the use of different R packages to analyse publicly available datasets hosted on [FlowRepository](http://flowrepository.org/). The first dataset [FR-FCM-Z5PC](https://flowrepository.org/id/FR-FCM-Z5PC) contains FCS files from a study [assessing the post recovery immune phenotypes from patients infected with COVID-19](https://www.nature.com/articles/s41467-022-34638-2). We are using a subset of the FCS files. The second dataset [FR-FCM-ZZ36](http://flowrepository.org/id/FR-FCM-ZZ36) contains FCS files for OMIP-018, a study designed to phenotype T cells for expression of various chemokine receptors.\n\nThe data required for this workshop, including subsets extracted from the FlowRepository datasets are made available inside vignettes/data folder.\n\n## `cytoverse` data structures for **.fcs** files\n\nThere are four **main** data structures that represent flow cytometry data in `cytoverse`: `cytoframe`, `cytoset`, `GatingHierarchy` and `GatingSet`.\n\n-   `cytoframe`: a single **.fcs** file,\n-   `cytoset`: a list like object that can store multiple **.fcs** files,\n-   `GatingHierarchy`: a list like object that allows building and attaching gates and filter to a `cytoframe`\n-   `GatingSet`: a list like object that allows building and attaching gates and filter to a `cytoset`\n\nSome of these have overlapping functionality, and we'll eventually explain when you would prefer one data structure to another as we continue through this workshop.\n\nThere are additional legacy data structures called `flowFrame` and `flowSet` in `cytoverse` that are analogous to `cytoframe` and `cytoset` in function. We will briefly discuss these data structures in this workshop.\n\n## Reading an FCS file\n\nThere are two preferred approaches to read in **.fcs** file(s) into R:\n\n-   Read in individual **.fcs** files as `cytoframe` (associated with `flowWorkspace` package) or `flowFrame` (associated with `flowCore` package)\n-   Read in a set of **.fcs** files as `cytoset` (associated with `flowWorkspace` package) or `flowSet` (associated with `flowCore` package)\n\n(Additionally, you can read a workspace generated with another tool, such as FlowJo, using the `CytoML` package.)\n\n### Working with `cytoframe` or `flowFrame` objects\n\nA few useful definitions that help us get oriented with the underlying data in the `cytoframe`/`flowFrame` object.\n\n-   **Channels**: Instrument derived labels of various parameters that were measured. Channels are the column names of the `cytoframe`/`flowFrame`. Any data generated from the same instrument will have the same (similar) Channel names.\n-   **Markers**: User provided labels for various parameters that were measured. For example: Channel name: B710-A, Marker name: CD3. Marker names are set by the users and may not be unique across experiments/users. Not all channels are markers -- some are physical parameters such as the forward scatter or side scatter. These channels will have their marker names set to `NA`.\n-   **Expression**: Measured values. A matrix where every row is an event (frequently a cell) and every column is a channel.\n\nWorking with a `cytoframe`/`flowFrame` object is very similar to working with a `data.frame` in R, where a \"row\" is a cell and a \"column\" is a channel.\n\n#### Reading an FCS file as a `cytoframe` object\n\nThe function `load_cytoframe_from_fcs` is used to read in individual file as a `cytoframe` object.\n\n```{r load_cytoframe, eval=TRUE, echo=TRUE, message = FALSE}\ncf <- load_cytoframe_from_fcs(\"data/fcs-data/4000_BDC-CR1.fcs\")\n# a cytoframe object\ncf\n```\n\n#### Reading an FCS file as a `flowFrame` object\n\nTo read a FCS file as a `flowFrame` object: (standard for Flow Cytometry)\n\n```{r}\nff <- read.FCS(\"data/fcs-data/4000_BDC-CR1.fcs\")\n# a flowFrame object\nff\n```\n\n#### `cytoframe` versus `flowFrame` objects\n\nBoth `cytoframe` and `flowFrame` object has 3 slots where various data is stored.\n\n-   `exprs(cf)`: stores the expression matrix (i.e. the collected data),\n-   `parameters(cf)`: stores information pertaining to channels: channel name, marker description,and data ranges as an AnnotatedDataFrame,\n-   `keyword(cf)`: stores additional information extracted from the **.fcs** file header. The file header follow ISAC guidelines. Visit [here](https://isac-net.org/page/Data-Standards) for more information.\n\n![Overview of `cytoframe`/`flowFrame` object](images/flowFrame.png){#fig-flowframe fig-alt=\"Overview of cytoframe/flowFrame object created by reading a FCS file\" fig-align=\"center\"}\n\n::: callout-tip\nIn R, the `@` and `$` operators serve the purpose of accessing elements within an object. However, it is \\textcolor{red}{not advisable} to employ these operators for accessing elements directly. A recommended practice is to use functions and methods explicitly designed for this purpose, as will be discussed in the next section.\n\n-   To extract any \\textcolor{lpink}{pink} or \\textcolor{lblue}{blue} slot shown in @fig-flowframe the `@` operator is used. On the other hand, to extract any \\textcolor{lgreen}{green} slot the `$` operator is used.\n-   In general, the `@` operator is used to extract/replace contents of a slot or property of an object. The `$` operator is used to extract/replace parts on vectors, matrices, arrays or lists. \n:::\n\n::: callout-note\nInteracting with a `cytoframe` is very similar to interacting with a `flowframe`, with one important difference. While operations such as subsetting or copying a `flowFrame` using the standard R assignment operator (`<-`) will perform a deep copy of the data in its slots, the same operations on a `cytoframe` will produce a view to the same underlying data as the original object. This means that changes made to the `cytoframe` resulting from subsetting or copying will affect the original `cytoframe.` \n:::\n\n**From this point onwards, we focus on examples and usages involving the `cytoframe` object, with the majority of the content dedicated to exploring and understanding this specific data structure.**\n\n### Examples\n\n#### Accessing parameter summary and metadata\n\nSummary of measured parameters.\n\n```{r accessor_examples, echo=TRUE, eval=TRUE, message=FALSE}\n# parameters\nparameters(cf) |> pData() # show as a dataframe\n\n```\n\nVarious metadata present in the **.fcs** files.\n\n```{r}\n# keywords\nkeyword(cf) |> head(10) # only show the first 10\n\n```\n\n#### Channels, Expression, and Subsets\n\n```{r channels, echo=TRUE, message=FALSE}\n# channels\ncolnames(cf)\n\n# markernames\nmarkernames(cf)\n\n# instrument channel ranges\nrange(cf, type = \"instrument\")\n\n# expression\nexprs(cf)[1:5, 1:5]\n\n# number of events\nnrow(cf)\n\n# number of channels \nncol(cf)\n\n# dimesnions (nrows, nclos)\ndim(cf)\n```\n\nNotice that there is a correspondence between channels, markers, and the expression matrix. i.e. the `names` of the named vector `markernames(cf)` are a subset of the columns of the expression matrix `exprs(cf)` as well as the columns of the `cytoframe`.\n\n#### Preliminary statistics\n\n```{r}\n# summary of expression\nsummary(cf)\n\n# median value across each row\nrow_stat <- each_row(cf, median)\nhead(row_stat)\n\n# mean value across each row\ncol_stat <- each_col(cf, mean)\nhead(col_stat)\n```\n\nStatistic functions listed under location and scale estimator in [matrxStats page](https://cran.r-project.org/web/packages/matrixStats/vignettes/matrixStats-methods.html) can be used as the second argument in `each_row(argument1, argument2)` and `each_col(argument1, argument2)` functions.\n\n#### Aditional examples\n\n```{r correspondance, echo=TRUE,message=FALSE}\n# interested marker: CD4\n# easy to find which channel is mapped to CD4\nCD4_chan <- flowCore::getChannelMarker(\n  frm = cf,\n  name = \"CD4\"\n)$name\n\n# inspect CD4_chan\nCD4_chan\n\n# extract expression of cd4\ne_cd4 <- exprs(cf[, CD4_chan])\nhead(e_cd4)\n\n# subset cytorame by column\ns_cf <- cf[, CD4_chan]\ns_cf\n\n# subset cytoframe by row\ns2_cf <- cf[1:100, ]\ns2_cf\n```\n\nNotice that the subset (`[]`) operation can be applied directly to the `cytoframe` object so that information regarding the file is preserved. Also, as indicated above, these operations provide an aliased view of the data without creating a **copy**.\n\nBelow, we show examples of how to manipulate the `cytoframe` object and create a copy using `realize_view()`:\n\n```{r manipulate_flowFrame, echo=TRUE, message=FALSE}\n# create a new markername\nnew_name <- c(\"U785-A\" = \"test\")\n\n# create a new cytoframe subset\ncf_sub <- cf[1:150, ] |> realize_view() # realize_view creates a new cytoframe, distinct from the original\n\n# old markernames\nmarkernames(cf_sub)\n\n# set new markername\nmarkernames(cf_sub) <- new_name\nmarkernames(cf_sub)\n\n# manipulating expression values\n# notice the data range \nrange(cf_sub[, \"U785-A\"])\n\n# visualise original channel ditribution\nplot(\n  density(\n    exprs(cf_sub[, \"U785-A\"])\n  ),\n  main = \"U785-A\"\n)\n\n# asinh transform\nexprs(cf_sub)[, \"U785-A\"] <- asinh(exprs(cf_sub)[, \"U785-A\"])\n\n# notice the data range after transformation\nrange(\n  cf_sub[, \"U785-A\"],\n  type = \"instrument\"\n)\n\n# visualise channel distribution\nplot(\n  density(\n    exprs(cf_sub[, \"U785-A\"])\n  ),\n  main = \"U785-A\"\n)\n\n```\n\nNotice that the data range summary was not updated when we used `<-` to change the underlying expression matrix. A good practice is to use `transform` function to transform the underlying expression matrix. Importantly, `transform` also updates the data range summary. Moreover, `transform` can also be used to add new columns to the `cytoframe`.\n\n*Note*: We will go over `transformations` in a later section.\n\n### Basic plots using `flowViz` package\n\n`flowViz` package provide functions and methods to visualize flow cytometry data. This package heavily depends on the flowCore package.\n\n```{r}\n#| output: false\nlibrary(flowViz)\n```\n\n#### Examples\n\nIf the object has only a single parameter this produces a histogram. To select specific parameters from a flowFrame for plotting, either subset the object or specify the parameters as a character vector as shown below.\n\n```{r}\nplot(cf, c(\"FSC-A\"))\n```\n\nFor exactly two parameters this plots a [bivariate density map](https://en.wikipedia.org/wiki/Multivariate_map#:~:text=A%20bivariate%20map%20or%20multivariate,%2C%20cartogram%2C%20or%20proportional%20symbols).\n\n```{r}\n#| fig-height: 5\nplot(cf, c(\"FSC-A\", \"SSC-A\"))\n```\n\nFor more than two parameters this produce a simple scatter plots matrix (splom). The smooth parameters lets you toggle between density-type smoothScatter plots and regular scatterplots. For far more sophisticated plotting of flow cytometry data, ggcyto package is used generally (will be discussed later).\n\nFor multiple parameters,\n\n```{r}\n#| cache: true\n#| warning: false\n#| fig-width: 12\n#| fig-height: 12\nall_param = dput(colnames(cf)[6:8])\nplot(cf, all_param)\n```\n\n## Reading a set of FCS files\n\nIn a experimental sense, a single **.fcs** file is not very interesting, since this represents only a single sample. To draw any conclusions, we'll want replicates. When there are a set of **.fcs** files they can be loaded into R either as a `cytoset` or `flowSet`.\n\n**cytoset/flowSet**: A collection of **.fcs** files, preferably, but not necessarily from the same panel/experiment.\n\n### Reading a set of FCS files as a `cytoset`\n\n```{r cytoset_example, echo=TRUE, message=TRUE}\ncs <- load_cytoset_from_fcs(path = \"data/fcs-data/\")\ncs\n```\n\n### Reading a set of FCS files as a `flowSet`\n\n```{r flowSet_example, echo=TRUE, message=TRUE}\nframes <- lapply(dir(\"data/fcs-data/\", full.names=TRUE), read.FCS)\nfs <- as(frames, \"flowSet\") \nfs\n```\nA `cytoset`/`flowSet` can also be indexed with square brackets `cs[i,j]`, however now the row index `i` selects samples (**individual FCS files**) rather than cells. A `cytoset`/`flowSet` also behaves like a list -- a double bracket `cs[[i]]` selects a single sample as a `cytoframe`/`flowFrame`.\n\nGenerally, each FCS file replicate has unique metadata properties that can (**and should**) be supplied to the `cytoset`/`flowSet`. These can be added after loading the `cytoset`/`flowSet` by using `pData(x) <- data.frame`. The `rownames` of the data.frame **must match** the `sampleNames` of the `cytoset`/`flowSet`.\n\n::: callout-note\nThe primary difference between the `cytoset` and `flowSet` classes is in the underlying representation of the data. Because `cytoset` is a reference class, copying or subsetting a `cytoset` object will return a `cytoset` pointing to the same underlying data. A deep copy of the data can be obtained via the realize_view method as before.\n\nThere is one notable exception to the typical behavior of most methods returning a `cytoframe`. The standard extraction operator (`[[]]`) will by default perform a deep copy of the subset being extracted and return a `flowFrame`. \n:::\n\n**Here onwards, we focus on examples involving the `cytoset` object, with the majority of the content dedicated to exploring and understanding this specific data structure.**\n\n```{r show_metadata_cs, echo=TRUE,message=TRUE}\n# prior to providing metadata\npData(cs)\n\n# create metadata\nmetadata <- data.frame(\n  Treatment = rep(c(\"Untreated\",\"Treated\"),\n    length.out = length(cs)\n  ),\n  panel = ifelse(\n    grepl(\n      pattern = \"TNK\",\n      x = sampleNames(cs)\n    ),\n    \"T Cell Panel\",\n    \"Myeloid Panel\"\n  )\n)\n```\n\nLet's see what happens when `rownames` do not match!\n\n```{r metadata_cs_error, echo=TRUE, eval=TRUE, error=TRUE}\n# try to add metadata  -- this leads to an error\npData(cs) <- metadata\n```\n\nNow, we ensure that `rownames` of data.frame matches `sampleNames` of the `cytoset`.\n\n```{r metadata_cs_samplenames, echo=TRUE, eval=TRUE, message=TRUE}\n# now it works\nrow.names(metadata) <- sampleNames(cs)\npData(cs) <- metadata\npData(cs)\n```\n\nThe benefit of having metadata is that we can use many of the sub-setting operations in a metadata specific manner.\n\nThis is much more convenient than going back and forth between the full set of files.\n\n```{r cytoset_subset, echo=TRUE, message=TRUE}\n# subset by files that have myeloid staining panel without creating a copy of the data\ncs_myeloid <- cs[pData(cs)[[\"panel\"]] == \"Myeloid Panel\",]\n\ncs_myeloid\npData(cs_myeloid)\n```\n\n### Cytoset views and aliasing\n\nMany of the sub-setting operation for `cytoframe` are also applicable for `cytoset`. Similar to `cytoframe` sub-setting operations only create a new \"view\" of the data. For a complete copy of the data, `realize_view` should be used.\n\nBelow is an example of `cytoset` sub-setting which also highlights how the operations performed on `cytoset` affects the underlying data.\n\n```{r cytoset_subset_2, echo=TRUE,message=TRUE}\n# demonstrate how cs point to the same underlying data\nrange(cs[[1, \"B515-A\"]])\n\n# subset and show prior to transformation\ncs_small <- cs[1]\nrange(cs_small[[1, \"B515-A\"]])\n\n# create a transformList\ntrans <- transformList(\"B515-A\",asinh)\n\n# transform\ncs_small <- transform(cs_small,trans)\n\n# after transformation\nrange(cs_small[[1, \"B515-A\"]])\n\n# whole cs \nrange(cs[[1, \"B515-A\"]])\n```\n\nAs you see, the transformation was applied to a subset `cs_small` however the original `cs` was also altered highlighting that both objects were pointing to the same data. To confirm this, you can use `cs_get_uri` or `cf_get_uri`:\n\n```{r}\ncs_get_uri(cs_small)\ncs_get_uri(cs)\n```\n\nTo perform a **deep copy** we can use `realize_view()`\n\n```{r cytoset_deep_copy, echo=TRUE, message=TRUE}\n# look at underlying expression\nrange(cs[[2, \"B515-A\"]])\n\n# subset and show prior to transformation\ncs_small2 <- realize_view(cs[2])\nrange(cs_small2[[1, \"B515-A\"]])\n\n# create a transformList\ntrans <- transformList(\"B515-A\",asinh)\n\n# transform\ncs_small2 <- transform(cs_small2,trans)\n\n# after transformation\nrange(cs_small2[[1, \"B515-A\"]])\n\n# whole cs \nrange(cs[[2, \"B515-A\"]])\n```\n\nNotice that `cs` is left unchanged.\n\n### Adding additional **.fcs** files to `cytoset`\n\nLastly, we can also add additional **.fcs** files to a `cytoset` using `cs_add_cytoframe`.\n\n```{r add_more_fcs, echo=TRUE, eval=T}\n# add to cytoset\ncs_small <- realize_view(cs[1]) # cs[1] subsets cs into a cytoset while realize_view leads to a deep_copy into a new cytoset\ncs_small\n\n# no need to assign back to cs_small, because this function operates by reference and returns NULL anyways.\ncs_add_cytoframe(\n  cs = cs_small,\n  sn = \"Sample Name\",\n  cf = cs[[3]]   # cs[[3]] results in a cytoframe\n) \ncs_small\n```\n\n### From `cytoset` to `cytoframe`\n\nIt is possible that you may want to extract a `cytoframe` or extract all files as a list of `cytoframe`. We can either use `[[]]` to directly grab a `cytoframe` or `cytoset_to_list`.\n\n```{r cytoset_to_cytoframe, echo=TRUE, eval=TRUE, message = FALSE}\n# extract a single cytoframe by using cs[[index/samplename]]\nsingle_cf <- cs[[1]]\n\n# convert to a list\nlist_of_cf <- cytoset_to_list(cs) \n```\n\n### List like operation with `cytoset`\n\nAs indicated previously, a `cytoset` behaves like a list. To leverage this behaviour we can use `fsApply` to iterate through the samples in a `cytoset`. By default, output is attempted to be coerced to a single array like object. (Set `simplify = FALSE` to return another list.)\n\n```{r fsApply, echo=TRUE, eval=TRUE, message=FALSE}\n# getting number of rows (cells) of individual cytoframes\nn_cell_events <- fsApply(cs, nrow)\nn_cell_events\n```\n\n## Methods for conversion between `cyto-` and `flow-` objects\n\n```{r cyto_to_flo, echo=TRUE, eval=TRUE, message = FALSE}\n# convert a flowframe to cytoframe \nff_new <- cytoframe_to_flowFrame(cf)\n\n# convert a cytoframe to flowframe \ncf_new <- flowFrame_to_cytoframe(ff)\n\n# convert a flowset to cytoset \nfs_new <- cytoset_to_flowSet(cs)\n\n# convert a cytoset to flowset \ncs_new <- flowSet_to_cytoset(fs)\n```\n\n## Saving your data\n\nSaving `cyto-` data is easy.\n\n```{r save_cytoset,echo=TRUE, eval=FALSE,message=FALSE}\n# save cytoframe\ncf_write_disk(cf, \"path/to/my_new_cf\")\n\n# save cytoset\nsave_cytoset(cs, path = \"path/to/my/cs\")\n```\n\nLoading it back is just as easy.\n\n```{r load_cf_cs, echo=TRUE, eval=FALSE, message=FALSE}\n# load cytoframe\nload_cytoframe(\"path/to/my_cf\")\n\n# load cytoset\nload_cytoset(\"path/to/my/cs\")\n\n```\n\nWriting `flow-` data is easy.\n\n```{r save_cytoset,echo=TRUE, eval=FALSE,message=FALSE}\n# write flowFrame\nwrite.FCS(ff, \"path/to/my_new_ff\")\n\n# write flowSet\nwrite.flowSet(fs, path = \"path/to/my/cs\")\n```\n\nWe have previously discussed how to read FCS files into a `flowFrame` or `flowSet` objects. \n\n## Conclusion\n\nWe went through multiple ways to import, interact with, and manipulate **.fcs** files using the `cytoverse` tools. It is important to note additional functionality, *which we will not going to go over at this workshop for the sake of time*, for further manipulation and even creation of **.fcs** files exist with the `cytoverse`. We encourage you to explore them further at your leisure by calling `browseVignettes(\"flowWorkspace\")` and `browseVignettes(\"flowCore\")`.\n","srcMarkdownNoYaml":"\n\n## Introduction\n\nFlow cytometry data (regardless of the type of instrument used) is generally saved as a **.fcs** file. This file is populated with raw data, fluorescence intensity (for optics based technologies) and abundance (for mass cytrometry), as well as various metadata including: *user id*, *instrument id*, *dynamic range of instrument*, etc. It is important to be able to interact with and manipulate the **.fcs** file as it gives the users/analysts fine grain control.\n\n## Installing/loading required libraries\n\nYou can install all the required packages as follows:\n\n```{r install_libraries, echo=TRUE, eval=FALSE, message=FALSE}\nif (!require(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\n\nBiocManager::install(c(\"cytolib\", \"flowCore\", \"flowWorkspace\", \"ggcyto\", \n                       \"openCyto\", \"flowStats\", \"CytoML\", \"flowClust\",\n                       \"flowClean\", \"flowAI\", \"PeacoQC\"))\n```\n\nFor the moment, we only need to load `flowCore` and `flowWorkspace`.\n\n```{r load_library_download_cache, eval=TRUE, echo=TRUE, message = FALSE, warning = FALSE}\nlibrary(flowCore)\nlibrary(flowWorkspace)\n```\n\n## FlowRepository workshop data\n\nIn this workshop we will demonstrate the use of different R packages to analyse publicly available datasets hosted on [FlowRepository](http://flowrepository.org/). The first dataset [FR-FCM-Z5PC](https://flowrepository.org/id/FR-FCM-Z5PC) contains FCS files from a study [assessing the post recovery immune phenotypes from patients infected with COVID-19](https://www.nature.com/articles/s41467-022-34638-2). We are using a subset of the FCS files. The second dataset [FR-FCM-ZZ36](http://flowrepository.org/id/FR-FCM-ZZ36) contains FCS files for OMIP-018, a study designed to phenotype T cells for expression of various chemokine receptors.\n\nThe data required for this workshop, including subsets extracted from the FlowRepository datasets are made available inside vignettes/data folder.\n\n## `cytoverse` data structures for **.fcs** files\n\nThere are four **main** data structures that represent flow cytometry data in `cytoverse`: `cytoframe`, `cytoset`, `GatingHierarchy` and `GatingSet`.\n\n-   `cytoframe`: a single **.fcs** file,\n-   `cytoset`: a list like object that can store multiple **.fcs** files,\n-   `GatingHierarchy`: a list like object that allows building and attaching gates and filter to a `cytoframe`\n-   `GatingSet`: a list like object that allows building and attaching gates and filter to a `cytoset`\n\nSome of these have overlapping functionality, and we'll eventually explain when you would prefer one data structure to another as we continue through this workshop.\n\nThere are additional legacy data structures called `flowFrame` and `flowSet` in `cytoverse` that are analogous to `cytoframe` and `cytoset` in function. We will briefly discuss these data structures in this workshop.\n\n## Reading an FCS file\n\nThere are two preferred approaches to read in **.fcs** file(s) into R:\n\n-   Read in individual **.fcs** files as `cytoframe` (associated with `flowWorkspace` package) or `flowFrame` (associated with `flowCore` package)\n-   Read in a set of **.fcs** files as `cytoset` (associated with `flowWorkspace` package) or `flowSet` (associated with `flowCore` package)\n\n(Additionally, you can read a workspace generated with another tool, such as FlowJo, using the `CytoML` package.)\n\n### Working with `cytoframe` or `flowFrame` objects\n\nA few useful definitions that help us get oriented with the underlying data in the `cytoframe`/`flowFrame` object.\n\n-   **Channels**: Instrument derived labels of various parameters that were measured. Channels are the column names of the `cytoframe`/`flowFrame`. Any data generated from the same instrument will have the same (similar) Channel names.\n-   **Markers**: User provided labels for various parameters that were measured. For example: Channel name: B710-A, Marker name: CD3. Marker names are set by the users and may not be unique across experiments/users. Not all channels are markers -- some are physical parameters such as the forward scatter or side scatter. These channels will have their marker names set to `NA`.\n-   **Expression**: Measured values. A matrix where every row is an event (frequently a cell) and every column is a channel.\n\nWorking with a `cytoframe`/`flowFrame` object is very similar to working with a `data.frame` in R, where a \"row\" is a cell and a \"column\" is a channel.\n\n#### Reading an FCS file as a `cytoframe` object\n\nThe function `load_cytoframe_from_fcs` is used to read in individual file as a `cytoframe` object.\n\n```{r load_cytoframe, eval=TRUE, echo=TRUE, message = FALSE}\ncf <- load_cytoframe_from_fcs(\"data/fcs-data/4000_BDC-CR1.fcs\")\n# a cytoframe object\ncf\n```\n\n#### Reading an FCS file as a `flowFrame` object\n\nTo read a FCS file as a `flowFrame` object: (standard for Flow Cytometry)\n\n```{r}\nff <- read.FCS(\"data/fcs-data/4000_BDC-CR1.fcs\")\n# a flowFrame object\nff\n```\n\n#### `cytoframe` versus `flowFrame` objects\n\nBoth `cytoframe` and `flowFrame` object has 3 slots where various data is stored.\n\n-   `exprs(cf)`: stores the expression matrix (i.e. the collected data),\n-   `parameters(cf)`: stores information pertaining to channels: channel name, marker description,and data ranges as an AnnotatedDataFrame,\n-   `keyword(cf)`: stores additional information extracted from the **.fcs** file header. The file header follow ISAC guidelines. Visit [here](https://isac-net.org/page/Data-Standards) for more information.\n\n![Overview of `cytoframe`/`flowFrame` object](images/flowFrame.png){#fig-flowframe fig-alt=\"Overview of cytoframe/flowFrame object created by reading a FCS file\" fig-align=\"center\"}\n\n::: callout-tip\nIn R, the `@` and `$` operators serve the purpose of accessing elements within an object. However, it is \\textcolor{red}{not advisable} to employ these operators for accessing elements directly. A recommended practice is to use functions and methods explicitly designed for this purpose, as will be discussed in the next section.\n\n-   To extract any \\textcolor{lpink}{pink} or \\textcolor{lblue}{blue} slot shown in @fig-flowframe the `@` operator is used. On the other hand, to extract any \\textcolor{lgreen}{green} slot the `$` operator is used.\n-   In general, the `@` operator is used to extract/replace contents of a slot or property of an object. The `$` operator is used to extract/replace parts on vectors, matrices, arrays or lists. \n:::\n\n::: callout-note\nInteracting with a `cytoframe` is very similar to interacting with a `flowframe`, with one important difference. While operations such as subsetting or copying a `flowFrame` using the standard R assignment operator (`<-`) will perform a deep copy of the data in its slots, the same operations on a `cytoframe` will produce a view to the same underlying data as the original object. This means that changes made to the `cytoframe` resulting from subsetting or copying will affect the original `cytoframe.` \n:::\n\n**From this point onwards, we focus on examples and usages involving the `cytoframe` object, with the majority of the content dedicated to exploring and understanding this specific data structure.**\n\n### Examples\n\n#### Accessing parameter summary and metadata\n\nSummary of measured parameters.\n\n```{r accessor_examples, echo=TRUE, eval=TRUE, message=FALSE}\n# parameters\nparameters(cf) |> pData() # show as a dataframe\n\n```\n\nVarious metadata present in the **.fcs** files.\n\n```{r}\n# keywords\nkeyword(cf) |> head(10) # only show the first 10\n\n```\n\n#### Channels, Expression, and Subsets\n\n```{r channels, echo=TRUE, message=FALSE}\n# channels\ncolnames(cf)\n\n# markernames\nmarkernames(cf)\n\n# instrument channel ranges\nrange(cf, type = \"instrument\")\n\n# expression\nexprs(cf)[1:5, 1:5]\n\n# number of events\nnrow(cf)\n\n# number of channels \nncol(cf)\n\n# dimesnions (nrows, nclos)\ndim(cf)\n```\n\nNotice that there is a correspondence between channels, markers, and the expression matrix. i.e. the `names` of the named vector `markernames(cf)` are a subset of the columns of the expression matrix `exprs(cf)` as well as the columns of the `cytoframe`.\n\n#### Preliminary statistics\n\n```{r}\n# summary of expression\nsummary(cf)\n\n# median value across each row\nrow_stat <- each_row(cf, median)\nhead(row_stat)\n\n# mean value across each row\ncol_stat <- each_col(cf, mean)\nhead(col_stat)\n```\n\nStatistic functions listed under location and scale estimator in [matrxStats page](https://cran.r-project.org/web/packages/matrixStats/vignettes/matrixStats-methods.html) can be used as the second argument in `each_row(argument1, argument2)` and `each_col(argument1, argument2)` functions.\n\n#### Aditional examples\n\n```{r correspondance, echo=TRUE,message=FALSE}\n# interested marker: CD4\n# easy to find which channel is mapped to CD4\nCD4_chan <- flowCore::getChannelMarker(\n  frm = cf,\n  name = \"CD4\"\n)$name\n\n# inspect CD4_chan\nCD4_chan\n\n# extract expression of cd4\ne_cd4 <- exprs(cf[, CD4_chan])\nhead(e_cd4)\n\n# subset cytorame by column\ns_cf <- cf[, CD4_chan]\ns_cf\n\n# subset cytoframe by row\ns2_cf <- cf[1:100, ]\ns2_cf\n```\n\nNotice that the subset (`[]`) operation can be applied directly to the `cytoframe` object so that information regarding the file is preserved. Also, as indicated above, these operations provide an aliased view of the data without creating a **copy**.\n\nBelow, we show examples of how to manipulate the `cytoframe` object and create a copy using `realize_view()`:\n\n```{r manipulate_flowFrame, echo=TRUE, message=FALSE}\n# create a new markername\nnew_name <- c(\"U785-A\" = \"test\")\n\n# create a new cytoframe subset\ncf_sub <- cf[1:150, ] |> realize_view() # realize_view creates a new cytoframe, distinct from the original\n\n# old markernames\nmarkernames(cf_sub)\n\n# set new markername\nmarkernames(cf_sub) <- new_name\nmarkernames(cf_sub)\n\n# manipulating expression values\n# notice the data range \nrange(cf_sub[, \"U785-A\"])\n\n# visualise original channel ditribution\nplot(\n  density(\n    exprs(cf_sub[, \"U785-A\"])\n  ),\n  main = \"U785-A\"\n)\n\n# asinh transform\nexprs(cf_sub)[, \"U785-A\"] <- asinh(exprs(cf_sub)[, \"U785-A\"])\n\n# notice the data range after transformation\nrange(\n  cf_sub[, \"U785-A\"],\n  type = \"instrument\"\n)\n\n# visualise channel distribution\nplot(\n  density(\n    exprs(cf_sub[, \"U785-A\"])\n  ),\n  main = \"U785-A\"\n)\n\n```\n\nNotice that the data range summary was not updated when we used `<-` to change the underlying expression matrix. A good practice is to use `transform` function to transform the underlying expression matrix. Importantly, `transform` also updates the data range summary. Moreover, `transform` can also be used to add new columns to the `cytoframe`.\n\n*Note*: We will go over `transformations` in a later section.\n\n### Basic plots using `flowViz` package\n\n`flowViz` package provide functions and methods to visualize flow cytometry data. This package heavily depends on the flowCore package.\n\n```{r}\n#| output: false\nlibrary(flowViz)\n```\n\n#### Examples\n\nIf the object has only a single parameter this produces a histogram. To select specific parameters from a flowFrame for plotting, either subset the object or specify the parameters as a character vector as shown below.\n\n```{r}\nplot(cf, c(\"FSC-A\"))\n```\n\nFor exactly two parameters this plots a [bivariate density map](https://en.wikipedia.org/wiki/Multivariate_map#:~:text=A%20bivariate%20map%20or%20multivariate,%2C%20cartogram%2C%20or%20proportional%20symbols).\n\n```{r}\n#| fig-height: 5\nplot(cf, c(\"FSC-A\", \"SSC-A\"))\n```\n\nFor more than two parameters this produce a simple scatter plots matrix (splom). The smooth parameters lets you toggle between density-type smoothScatter plots and regular scatterplots. For far more sophisticated plotting of flow cytometry data, ggcyto package is used generally (will be discussed later).\n\nFor multiple parameters,\n\n```{r}\n#| cache: true\n#| warning: false\n#| fig-width: 12\n#| fig-height: 12\nall_param = dput(colnames(cf)[6:8])\nplot(cf, all_param)\n```\n\n## Reading a set of FCS files\n\nIn a experimental sense, a single **.fcs** file is not very interesting, since this represents only a single sample. To draw any conclusions, we'll want replicates. When there are a set of **.fcs** files they can be loaded into R either as a `cytoset` or `flowSet`.\n\n**cytoset/flowSet**: A collection of **.fcs** files, preferably, but not necessarily from the same panel/experiment.\n\n### Reading a set of FCS files as a `cytoset`\n\n```{r cytoset_example, echo=TRUE, message=TRUE}\ncs <- load_cytoset_from_fcs(path = \"data/fcs-data/\")\ncs\n```\n\n### Reading a set of FCS files as a `flowSet`\n\n```{r flowSet_example, echo=TRUE, message=TRUE}\nframes <- lapply(dir(\"data/fcs-data/\", full.names=TRUE), read.FCS)\nfs <- as(frames, \"flowSet\") \nfs\n```\nA `cytoset`/`flowSet` can also be indexed with square brackets `cs[i,j]`, however now the row index `i` selects samples (**individual FCS files**) rather than cells. A `cytoset`/`flowSet` also behaves like a list -- a double bracket `cs[[i]]` selects a single sample as a `cytoframe`/`flowFrame`.\n\nGenerally, each FCS file replicate has unique metadata properties that can (**and should**) be supplied to the `cytoset`/`flowSet`. These can be added after loading the `cytoset`/`flowSet` by using `pData(x) <- data.frame`. The `rownames` of the data.frame **must match** the `sampleNames` of the `cytoset`/`flowSet`.\n\n::: callout-note\nThe primary difference between the `cytoset` and `flowSet` classes is in the underlying representation of the data. Because `cytoset` is a reference class, copying or subsetting a `cytoset` object will return a `cytoset` pointing to the same underlying data. A deep copy of the data can be obtained via the realize_view method as before.\n\nThere is one notable exception to the typical behavior of most methods returning a `cytoframe`. The standard extraction operator (`[[]]`) will by default perform a deep copy of the subset being extracted and return a `flowFrame`. \n:::\n\n**Here onwards, we focus on examples involving the `cytoset` object, with the majority of the content dedicated to exploring and understanding this specific data structure.**\n\n```{r show_metadata_cs, echo=TRUE,message=TRUE}\n# prior to providing metadata\npData(cs)\n\n# create metadata\nmetadata <- data.frame(\n  Treatment = rep(c(\"Untreated\",\"Treated\"),\n    length.out = length(cs)\n  ),\n  panel = ifelse(\n    grepl(\n      pattern = \"TNK\",\n      x = sampleNames(cs)\n    ),\n    \"T Cell Panel\",\n    \"Myeloid Panel\"\n  )\n)\n```\n\nLet's see what happens when `rownames` do not match!\n\n```{r metadata_cs_error, echo=TRUE, eval=TRUE, error=TRUE}\n# try to add metadata  -- this leads to an error\npData(cs) <- metadata\n```\n\nNow, we ensure that `rownames` of data.frame matches `sampleNames` of the `cytoset`.\n\n```{r metadata_cs_samplenames, echo=TRUE, eval=TRUE, message=TRUE}\n# now it works\nrow.names(metadata) <- sampleNames(cs)\npData(cs) <- metadata\npData(cs)\n```\n\nThe benefit of having metadata is that we can use many of the sub-setting operations in a metadata specific manner.\n\nThis is much more convenient than going back and forth between the full set of files.\n\n```{r cytoset_subset, echo=TRUE, message=TRUE}\n# subset by files that have myeloid staining panel without creating a copy of the data\ncs_myeloid <- cs[pData(cs)[[\"panel\"]] == \"Myeloid Panel\",]\n\ncs_myeloid\npData(cs_myeloid)\n```\n\n### Cytoset views and aliasing\n\nMany of the sub-setting operation for `cytoframe` are also applicable for `cytoset`. Similar to `cytoframe` sub-setting operations only create a new \"view\" of the data. For a complete copy of the data, `realize_view` should be used.\n\nBelow is an example of `cytoset` sub-setting which also highlights how the operations performed on `cytoset` affects the underlying data.\n\n```{r cytoset_subset_2, echo=TRUE,message=TRUE}\n# demonstrate how cs point to the same underlying data\nrange(cs[[1, \"B515-A\"]])\n\n# subset and show prior to transformation\ncs_small <- cs[1]\nrange(cs_small[[1, \"B515-A\"]])\n\n# create a transformList\ntrans <- transformList(\"B515-A\",asinh)\n\n# transform\ncs_small <- transform(cs_small,trans)\n\n# after transformation\nrange(cs_small[[1, \"B515-A\"]])\n\n# whole cs \nrange(cs[[1, \"B515-A\"]])\n```\n\nAs you see, the transformation was applied to a subset `cs_small` however the original `cs` was also altered highlighting that both objects were pointing to the same data. To confirm this, you can use `cs_get_uri` or `cf_get_uri`:\n\n```{r}\ncs_get_uri(cs_small)\ncs_get_uri(cs)\n```\n\nTo perform a **deep copy** we can use `realize_view()`\n\n```{r cytoset_deep_copy, echo=TRUE, message=TRUE}\n# look at underlying expression\nrange(cs[[2, \"B515-A\"]])\n\n# subset and show prior to transformation\ncs_small2 <- realize_view(cs[2])\nrange(cs_small2[[1, \"B515-A\"]])\n\n# create a transformList\ntrans <- transformList(\"B515-A\",asinh)\n\n# transform\ncs_small2 <- transform(cs_small2,trans)\n\n# after transformation\nrange(cs_small2[[1, \"B515-A\"]])\n\n# whole cs \nrange(cs[[2, \"B515-A\"]])\n```\n\nNotice that `cs` is left unchanged.\n\n### Adding additional **.fcs** files to `cytoset`\n\nLastly, we can also add additional **.fcs** files to a `cytoset` using `cs_add_cytoframe`.\n\n```{r add_more_fcs, echo=TRUE, eval=T}\n# add to cytoset\ncs_small <- realize_view(cs[1]) # cs[1] subsets cs into a cytoset while realize_view leads to a deep_copy into a new cytoset\ncs_small\n\n# no need to assign back to cs_small, because this function operates by reference and returns NULL anyways.\ncs_add_cytoframe(\n  cs = cs_small,\n  sn = \"Sample Name\",\n  cf = cs[[3]]   # cs[[3]] results in a cytoframe\n) \ncs_small\n```\n\n### From `cytoset` to `cytoframe`\n\nIt is possible that you may want to extract a `cytoframe` or extract all files as a list of `cytoframe`. We can either use `[[]]` to directly grab a `cytoframe` or `cytoset_to_list`.\n\n```{r cytoset_to_cytoframe, echo=TRUE, eval=TRUE, message = FALSE}\n# extract a single cytoframe by using cs[[index/samplename]]\nsingle_cf <- cs[[1]]\n\n# convert to a list\nlist_of_cf <- cytoset_to_list(cs) \n```\n\n### List like operation with `cytoset`\n\nAs indicated previously, a `cytoset` behaves like a list. To leverage this behaviour we can use `fsApply` to iterate through the samples in a `cytoset`. By default, output is attempted to be coerced to a single array like object. (Set `simplify = FALSE` to return another list.)\n\n```{r fsApply, echo=TRUE, eval=TRUE, message=FALSE}\n# getting number of rows (cells) of individual cytoframes\nn_cell_events <- fsApply(cs, nrow)\nn_cell_events\n```\n\n## Methods for conversion between `cyto-` and `flow-` objects\n\n```{r cyto_to_flo, echo=TRUE, eval=TRUE, message = FALSE}\n# convert a flowframe to cytoframe \nff_new <- cytoframe_to_flowFrame(cf)\n\n# convert a cytoframe to flowframe \ncf_new <- flowFrame_to_cytoframe(ff)\n\n# convert a flowset to cytoset \nfs_new <- cytoset_to_flowSet(cs)\n\n# convert a cytoset to flowset \ncs_new <- flowSet_to_cytoset(fs)\n```\n\n## Saving your data\n\nSaving `cyto-` data is easy.\n\n```{r save_cytoset,echo=TRUE, eval=FALSE,message=FALSE}\n# save cytoframe\ncf_write_disk(cf, \"path/to/my_new_cf\")\n\n# save cytoset\nsave_cytoset(cs, path = \"path/to/my/cs\")\n```\n\nLoading it back is just as easy.\n\n```{r load_cf_cs, echo=TRUE, eval=FALSE, message=FALSE}\n# load cytoframe\nload_cytoframe(\"path/to/my_cf\")\n\n# load cytoset\nload_cytoset(\"path/to/my/cs\")\n\n```\n\nWriting `flow-` data is easy.\n\n```{r save_cytoset,echo=TRUE, eval=FALSE,message=FALSE}\n# write flowFrame\nwrite.FCS(ff, \"path/to/my_new_ff\")\n\n# write flowSet\nwrite.flowSet(fs, path = \"path/to/my/cs\")\n```\n\nWe have previously discussed how to read FCS files into a `flowFrame` or `flowSet` objects. \n\n## Conclusion\n\nWe went through multiple ways to import, interact with, and manipulate **.fcs** files using the `cytoverse` tools. It is important to note additional functionality, *which we will not going to go over at this workshop for the sake of time*, for further manipulation and even creation of **.fcs** files exist with the `cytoverse`. We encourage you to explore them further at your leisure by calling `browseVignettes(\"flowWorkspace\")` and `browseVignettes(\"flowCore\")`.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":"rmarkdown::html_vignette","warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"embed-resources":true,"css":["../utils/css/custom.css"],"output-file":"1_Import_fcs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":["cerulean","../utils/css/custom.scss"],"toc-expand":1,"toc-title":"Contents","smooth-scroll":true,"title":"Basics of working with FCS files","vignette":"%\\VignetteIndexEntry{Basics of working with FCS files} %\\VignetteEngine{knitr::rmarkdown} %\\VignetteEncoding{UTF-8}\n"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}