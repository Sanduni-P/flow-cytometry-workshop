{
  "hash": "53069a4c28de223ebc0712dada5d680f",
  "result": {
    "markdown": "---\ntitle: \"Basics of working with FCS files\"\noutput: rmarkdown::html_vignette\nvignette: >\n  %\\VignetteIndexEntry{Basics of working with FCS files}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}\n---\n\n\n## Introduction\n\nFlow cytometry data (regardless of the type of instrument used) is generally saved as a **.fcs** file. This file is populated with raw data, fluorescence intensity (for optics based technologies) and abundance (for mass cytrometry), as well as various metadata including: *user id*, *instrument id*, *dynamic range of instrument*, etc. It is important to be able to interact with and manipulate the **.fcs** file as it gives the users/analysts fine grain control.\n\n## Installing/loading required libraries\n\nYou can install all the required packages as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!require(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\n\nBiocManager::install(c(\"cytolib\", \"flowCore\", \"flowWorkspace\", \"ggcyto\", \n                       \"openCyto\", \"flowStats\", \"CytoML\", \"flowClust\",\n                       \"flowClean\", \"flowAI\", \"PeacoQC\"))\n```\n:::\n\n\nFor the moment, we only need to load `flowCore` and `flowWorkspace`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(flowCore)\nlibrary(flowWorkspace)\n```\n:::\n\n\n## FlowRepository workshop data\n\nIn this workshop we will demonstrate the use of different R packages to analyse publicly available datasets hosted on [FlowRepository](http://flowrepository.org/). The first dataset [FR-FCM-Z5PC](https://flowrepository.org/id/FR-FCM-Z5PC) contains FCS files from a study [assessing the post recovery immune phenotypes from patients infected with COVID-19](https://www.nature.com/articles/s41467-022-34638-2). We are using a subset of the FCS files. The second dataset [FR-FCM-ZZ36](http://flowrepository.org/id/FR-FCM-ZZ36) contains FCS files for OMIP-018, a study designed to phenotype T cells for expression of various chemokine receptors.\n\nThe data required for this workshop, including subsets extracted from the FlowRepository datasets are made available inside vignettes/data folder.\n\n## `cytoverse` data structures for **.fcs** files\n\nThere are four **main** data structures that represent flow cytometry data in `cytoverse`: `cytoframe`, `cytoset`, `GatingHierarchy` and `GatingSet`.\n\n-   `cytoframe`: a single **.fcs** file,\n-   `cytoset`: a list like object that can store multiple **.fcs** files,\n-   `GatingHierarchy`: a list like object that allows building and attaching gates and filter to a `cytoframe`\n-   `GatingSet`: a list like object that allows building and attaching gates and filter to a `cytoset`\n\nSome of these have overlapping functionality, and we'll eventually explain when you would prefer one data structure to another as we continue through this workshop.\n\nThere are additional legacy data structures called `flowFrame` and `flowSet` in `cytoverse` that are analogous to `cytoframe` and `cytoset` in function. We will briefly discuss these data structures in this workshop.\n\n## Reading an FCS file\n\nThere are two preferred approaches to read in **.fcs** file(s) into R:\n\n-   Read in individual **.fcs** files as `cytoframe` (associated with `flowWorkspace` package) or `flowFrame` (associated with `flowCore` package)\n-   Read in a set of **.fcs** files as `cytoset` (associated with `flowWorkspace` package) or `flowSet` (associated with `flowCore` package)\n\n(Additionally, you can read a workspace generated with another tool, such as FlowJo, using the `CytoML` package.)\n\n### Working with `cytoframe` or `flowFrame` objects\n\nA few useful definitions that help us get oriented with the underlying data in the `cytoframe`/`flowFrame` object.\n\n-   **Channels**: Instrument derived labels of various parameters that were measured. Channels are the column names of the `cytoframe`/`flowFrame`. Any data generated from the same instrument will have the same (similar) Channel names.\n-   **Markers**: User provided labels for various parameters that were measured. For example: Channel name: B710-A, Marker name: CD3. Marker names are set by the users and may not be unique across experiments/users. Not all channels are markers -- some are physical parameters such as the forward scatter or side scatter. These channels will have their marker names set to `NA`.\n-   **Expression**: Measured values. A matrix where every row is an event (frequently a cell) and every column is a channel.\n\nWorking with a `cytoframe`/`flowFrame` object is very similar to working with a `data.frame` in R, where a \"row\" is a cell and a \"column\" is a channel.\n\n#### Reading an FCS file as a `cytoframe` object\n\nThe function `load_cytoframe_from_fcs` is used to read in individual file as a `cytoframe` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncf <- load_cytoframe_from_fcs(\"data/fcs-data/4000_BDC-CR1.fcs\")\n# a cytoframe object\ncf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncytoframe object '4000_BDC-CR1.fcs'\nwith 912254 cells and 33 observables:\n                  name         desc     range  minRange  maxRange\n$P1              FSC-A           NA    262143     0.000    262143\n$P2              FSC-H           NA    262143     0.000    262143\n$P3              SSC-A           NA    262143     0.000    262143\n$P4             B515-A   CADM1 FITC    262143  -110.386    262143\n$P5             B610-A  CD141 BB630    262143  -111.000    262143\n...                ...          ...       ...       ...       ...\n$P29            V710-A   CD86 BV711    262143      -111    262143\n$P30            V750-A CX3CR1 BV750    262143      -111    262143\n$P31            V785-A HLA-DR BV786    262143      -111    262143\n$P32 remove_from_FS_FM           QC    262143         0    262143\n$P33              Time           NA        92         0        92\n327 keywords are stored in the 'description' slot\nrow names(0):\n```\n:::\n:::\n\n\n#### Reading an FCS file as a `flowFrame` object\n\nTo read a FCS file as a `flowFrame` object: (standard for Flow Cytometry)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nff <- read.FCS(\"data/fcs-data/4000_BDC-CR1.fcs\")\n# a flowFrame object\nff\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nflowFrame object '210217_COVID-CR_BDC-CR1_Run 1_Samples_Plate 1_A1_A01_001.fcs'\nwith 912254 cells and 33 observables:\n                  name         desc     range  minRange  maxRange\n$P1              FSC-A           NA    262144     0.000    262144\n$P2              FSC-H           NA    262144     0.000    262144\n$P3              SSC-A           NA    262144     0.000    262144\n$P4             B515-A   CADM1 FITC    262144  -110.386    262144\n$P5             B610-A  CD141 BB630    262144  -111.000    262144\n...                ...          ...       ...       ...       ...\n$P29            V710-A   CD86 BV711    262144      -111    262144\n$P30            V750-A CX3CR1 BV750    262144      -111    262144\n$P31            V785-A HLA-DR BV786    262144      -111    262144\n$P32 remove_from_FS_FM           QC    262144         0    262144\n$P33              Time           NA        93         0     20000\n326 keywords are stored in the 'description' slot\n```\n:::\n:::\n\n\n#### `cytoframe` versus `flowFrame` objects\n\nBoth `cytoframe` and `flowFrame` object has 3 slots where various data is stored.\n\n-   `exprs(cf)`: stores the expression matrix (i.e. the collected data),\n-   `parameters(cf)`: stores information pertaining to channels: channel name, marker description,and data ranges as an AnnotatedDataFrame,\n-   `keyword(cf)`: stores additional information extracted from the **.fcs** file header. The file header follow ISAC guidelines. Visit [here](https://isac-net.org/page/Data-Standards) for more information.\n\n![Overview of `cytoframe`/`flowFrame` object](images/flowFrame.png){#fig-flowframe fig-alt=\"Overview of cytoframe/flowFrame object created by reading a FCS file\" fig-align=\"center\"}\n\n::: callout-tip\nIn R, the `@` and `$` operators serve the purpose of accessing elements within an object. However, it is \\textcolor{red}{not advisable} to employ these operators for accessing elements directly. A recommended practice is to use functions and methods explicitly designed for this purpose, as will be discussed in the next section.\n\n-   To extract any \\textcolor{lpink}{pink} or \\textcolor{lblue}{blue} slot shown in @fig-flowframe the `@` operator is used. On the other hand, to extract any \\textcolor{lgreen}{green} slot the `$` operator is used.\n-   In general, the `@` operator is used to extract/replace contents of a slot or property of an object. The `$` operator is used to extract/replace parts on vectors, matrices, arrays or lists. \n:::\n\n::: callout-note\nInteracting with a `cytoframe` is very similar to interacting with a `flowframe`, with one important difference. While operations such as subsetting or copying a `flowFrame` using the standard R assignment operator (`<-`) will perform a deep copy of the data in its slots, the same operations on a `cytoframe` will produce a view to the same underlying data as the original object. This means that changes made to the `cytoframe` resulting from subsetting or copying will affect the original `cytoframe.` \n:::\n\n**From this point onwards, we focus on examples and usages involving the `cytoframe` object, with the majority of the content dedicated to exploring and understanding this specific data structure.**\n\n### Examples\n\n#### Accessing parameter summary and metadata\n\nSummary of measured parameters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# parameters\nparameters(cf) |> pData() # show as a dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  name              desc  range   minRange maxRange\n$P1              FSC-A              <NA> 262143    0.00000   262143\n$P2              FSC-H              <NA> 262143    0.00000   262143\n$P3              SSC-A              <NA> 262143    0.00000   262143\n$P4             B515-A        CADM1 FITC 262143 -110.38593   262143\n$P5             B610-A       CD141 BB630 262143 -111.00000   262143\n$P6             B660-A       CD123 BB660 262143 -111.00000   262143\n$P7             B710-A      FcER1a BB700 262143 -111.00000   262143\n$P8             B780-A         IgD BB790 262143 -111.00000   262143\n$P9             G575-A         IFNAR2 PE 262143 -111.00000   262143\n$P10            G610-A CD88 PE-Dazzle594 262143 -111.00000   262143\n$P11            G660-A        CD3 PE-Cy5 262143 -111.00000   262143\n$P12            G710-A       CD5 PE-Cy55 262143 -111.00000   262143\n$P13            G780-A       CCR1 PE-Cy7 262143 -111.00000   262143\n$P14            R670-A         CD11c APC 262143 -111.00000   262143\n$P15            R730-A     CD27 APC-R700 262143 -111.00000   262143\n$P16            R780-A  XCR1 APC-Fire750 262143 -111.00000   262143\n$P17            U390-A       CCR3 BUV395 262143 -111.00000   262143\n$P18            U450-A Live Dead UV Blue 262143 -102.92210   262143\n$P19            U500-A       CD40 BUV496 262143 -111.00000   262143\n$P20            U570-A       CD56 BUV563 262143 -100.80198   262143\n$P21            U660-A       CD21 BUV661 262143 -111.00000   262143\n$P22            U740-A      CD163 BUV737 262143 -111.00000   262143\n$P23            U785-A       CD20 BUV805 262143 -111.00000   262143\n$P24            V450-A        CCR2 BV421 262143 -111.00000   262143\n$P25            V510-A        CD14 BV510 262143 -106.44221   262143\n$P26            V570-A        CD16 BV570 262143 -111.00000   262143\n$P27            V605-A        CD38 BV605 262143  -93.17506   262143\n$P28            V655-A        CCR5 BV650 262143 -111.00000   262143\n$P29            V710-A        CD86 BV711 262143 -111.00000   262143\n$P30            V750-A      CX3CR1 BV750 262143 -111.00000   262143\n$P31            V785-A      HLA-DR BV786 262143 -111.00000   262143\n$P32 remove_from_FS_FM                QC 262143    0.00000   262143\n$P33              Time              <NA>     92    0.00000       92\n```\n:::\n:::\n\n\nVarious metadata present in the **.fcs** files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# keywords\nkeyword(cf) |> head(10) # only show the first 10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$FCSversion\n[1] \"3\"\n\n$`$FIL`\n[1] \"4000_BDC-CR1.fcs\"\n\n$`$TOT`\n[1] \"912254\"\n\n$`$PAR`\n[1] \"33\"\n\n$`$BYTEORD`\n[1] \"4,3,2,1\"\n\n$`$DATATYPE`\n[1] \"F\"\n\n$FJ_FCS_VERSION\n[1] \"3\"\n\n$`$BEGINANALYSIS`\n[1] \"0\"\n\n$`$BEGINSTEXT`\n[1] \"0\"\n\n$`$BTIM`\n[1] \"10:29:03\"\n```\n:::\n:::\n\n\n#### Channels, Expression, and Subsets\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# channels\ncolnames(cf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"FSC-A\"             \"FSC-H\"             \"SSC-A\"            \n [4] \"B515-A\"            \"B610-A\"            \"B660-A\"           \n [7] \"B710-A\"            \"B780-A\"            \"G575-A\"           \n[10] \"G610-A\"            \"G660-A\"            \"G710-A\"           \n[13] \"G780-A\"            \"R670-A\"            \"R730-A\"           \n[16] \"R780-A\"            \"U390-A\"            \"U450-A\"           \n[19] \"U500-A\"            \"U570-A\"            \"U660-A\"           \n[22] \"U740-A\"            \"U785-A\"            \"V450-A\"           \n[25] \"V510-A\"            \"V570-A\"            \"V605-A\"           \n[28] \"V655-A\"            \"V710-A\"            \"V750-A\"           \n[31] \"V785-A\"            \"remove_from_FS_FM\" \"Time\"             \n```\n:::\n\n```{.r .cell-code}\n# markernames\nmarkernames(cf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             B515-A              B610-A              B660-A              B710-A \n       \"CADM1 FITC\"       \"CD141 BB630\"       \"CD123 BB660\"      \"FcER1a BB700\" \n             B780-A              G575-A              G610-A              G660-A \n        \"IgD BB790\"         \"IFNAR2 PE\" \"CD88 PE-Dazzle594\"        \"CD3 PE-Cy5\" \n             G710-A              G780-A              R670-A              R730-A \n      \"CD5 PE-Cy55\"       \"CCR1 PE-Cy7\"         \"CD11c APC\"     \"CD27 APC-R700\" \n             R780-A              U390-A              U450-A              U500-A \n \"XCR1 APC-Fire750\"       \"CCR3 BUV395\" \"Live Dead UV Blue\"       \"CD40 BUV496\" \n             U570-A              U660-A              U740-A              U785-A \n      \"CD56 BUV563\"       \"CD21 BUV661\"      \"CD163 BUV737\"       \"CD20 BUV805\" \n             V450-A              V510-A              V570-A              V605-A \n       \"CCR2 BV421\"        \"CD14 BV510\"        \"CD16 BV570\"        \"CD38 BV605\" \n             V655-A              V710-A              V750-A              V785-A \n       \"CCR5 BV650\"        \"CD86 BV711\"      \"CX3CR1 BV750\"      \"HLA-DR BV786\" \n  remove_from_FS_FM \n               \"QC\" \n```\n:::\n\n```{.r .cell-code}\n# instrument channel ranges\nrange(cf, type = \"instrument\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     FSC-A  FSC-H  SSC-A      B515-A B610-A B660-A B710-A B780-A G575-A G610-A\nmin      0      0      0   -110.3859   -111   -111   -111   -111   -111   -111\nmax 262143 262143 262143 262143.0000 262143 262143 262143 262143 262143 262143\n    G660-A G710-A G780-A R670-A R730-A R780-A U390-A      U450-A U500-A\nmin   -111   -111   -111   -111   -111   -111   -111   -102.9221   -111\nmax 262143 262143 262143 262143 262143 262143 262143 262143.0000 262143\n        U570-A U660-A U740-A U785-A V450-A      V510-A V570-A       V605-A\nmin   -100.802   -111   -111   -111   -111   -106.4422   -111    -93.17506\nmax 262143.000 262143 262143 262143 262143 262143.0000 262143 262143.00000\n    V655-A V710-A V750-A V785-A remove_from_FS_FM Time\nmin   -111   -111   -111   -111                 0    0\nmax 262143 262143 262143 262143            262143   92\n```\n:::\n\n```{.r .cell-code}\n# expression\nexprs(cf)[1:5, 1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         FSC-A    FSC-H    SSC-A   B515-A     B610-A\n[1,]  37806.11 33978.14 517.8660 136.6147   27.66158\n[2,] 105788.00 91726.41 550.5819 230.8201  331.49930\n[3,] 119658.92 96086.12 980.8203 275.5523 4240.47754\n[4,]  65660.55 57019.41 795.2517 407.6333  244.19577\n[5,] 119732.59 95060.98 555.4248 382.0113  648.48053\n```\n:::\n\n```{.r .cell-code}\n# number of events\nnrow(cf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 912254\n```\n:::\n\n```{.r .cell-code}\n# number of channels \nncol(cf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 33\n```\n:::\n\n```{.r .cell-code}\n# dimesnions (nrows, nclos)\ndim(cf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    events parameters \n    912254         33 \n```\n:::\n:::\n\n\nNotice that there is a correspondence between channels, markers, and the expression matrix. i.e. the `names` of the named vector `markernames(cf)` are a subset of the columns of the expression matrix `exprs(cf)` as well as the columns of the `cytoframe`.\n\n#### Preliminary statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# summary of expression\nsummary(cf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            FSC-A     FSC-H       SSC-A     B515-A      B610-A      B660-A\nMin.     34304.25  19999.50    2.240518  -110.3859   -132.2740   -210.3732\n1st Qu.  87272.29  70237.66  486.419678   208.1194    341.8090   7191.6100\nMedian  102740.58  83518.11  644.271606   302.8436    478.9301  13205.1885\nMean    101498.35  81101.55  786.391709   397.1372   1304.2548  14723.4119\n3rd Qu. 115452.03  93740.46  870.288940   477.7771    770.2125  20234.5640\nMax.    252405.12 209127.45 8274.216797 22591.7363 117936.5469 261941.1562\n           B710-A      B780-A      G575-A      G610-A      G660-A      G710-A\nMin.     -163.470   -197.9384   -142.9593   -129.1895   -252.0787   -217.6541\n1st Qu.  1898.958   1073.3176    978.4369    559.1452   5301.9827   6801.0914\nMedian   3525.223   1705.6006   1443.8180    866.7194   8866.5322  12812.9512\nMean     3833.847   2519.1960   2345.0305   2245.0479   9856.0090  13506.8896\n3rd Qu.  5376.914   2675.5859   2183.2964   1633.7214  13186.8789  18895.0566\nMax.    48943.254 241104.0156 255001.0469 112351.6562 165428.4688 154505.8750\n            G780-A     R670-A      R730-A     R780-A      U390-A     U450-A\nMin.     -184.6585  -127.0588   -169.4118  -138.3760  -124.05902 -102.92210\n1st Qu.  1386.5303  1657.2997   3418.5791   580.2402    44.37574   18.90896\nMedian   2110.0955  2431.9084   9204.0547  1256.1080   109.50300   63.70048\nMean     2470.5234  2823.0625   9533.2850  1299.7730   538.77084  190.49138\n3rd Qu.  3052.3540  3452.9258  14523.9941  1784.7538   300.42612  170.46536\nMax.    82854.4844 47455.3984 242545.5781 42423.1250 24223.10742 5708.70703\n            U500-A       U570-A     U660-A      U740-A     U785-A      V450-A\nMin.     -226.8526   -100.80198  -129.3914   -178.4754  -176.2910   -138.1614\n1st Qu.   155.8968     90.95654   333.4327    359.4340   125.9876    165.9489\nMedian    340.9289    158.62689   540.0557    554.0002   232.8040    335.9948\nMean     1200.8504    669.29520   890.7766    856.3386  1653.9154   1411.0790\n3rd Qu.   877.6004    574.35419   986.8828    845.4131   427.1417    958.3866\nMax.    78292.7344 151937.20312 42314.3125 152360.4531 85455.1562 135029.0625\n             V510-A     V570-A      V605-A     V655-A      V710-A      V750-A\nMin.      -106.4422  -113.6095   -93.17506  -138.9747   -148.3278   -232.1497\n1st Qu.    185.6013   287.5951    97.03428   566.6487    818.4460    595.6494\nMedian     273.5766   401.7236   236.00162   920.9233   1192.2645    935.9188\nMean       710.7748  1220.4410   853.88758  1317.9599   1436.2447   1335.0108\n3rd Qu.    474.6249   743.7738   774.47632  1541.7345   1691.9939   1475.6022\nMax.    120586.6406 93862.0859 85239.43750 65249.9648 141504.4844 194771.0625\n             V785-A remove_from_FS_FM        Time\nMin.      -216.4427          1.010923    0.004192\n1st Qu.    441.6244       2250.874268  773.810455\nMedian     699.6008       4494.002197 1519.027100\nMean      2389.9065       4497.678615 2191.098990\n3rd Qu.   1242.9441       6744.918945 3590.846069\nMax.    230174.0000       8999.978516 6001.229492\n```\n:::\n\n```{.r .cell-code}\n# median value across each row\nrow_stat <- each_row(cf, median)\nhead(row_stat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   77.88036  591.80017 2567.52710  325.73132 1063.35461  647.29474\n```\n:::\n\n```{.r .cell-code}\n# mean value across each row\ncol_stat <- each_col(cf, mean)\nhead(col_stat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      FSC-A       FSC-H       SSC-A      B515-A      B610-A      B660-A \n101498.3483  81101.5458    786.3917    397.1372   1304.2548  14723.4119 \n```\n:::\n:::\n\n\nStatistic functions listed under location and scale estimator in [matrxStats page](https://cran.r-project.org/web/packages/matrixStats/vignettes/matrixStats-methods.html) can be used as the second argument in `each_row(argument1, argument2)` and `each_col(argument1, argument2)` functions.\n\n#### Aditional examples\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# interested marker: CD4\n# easy to find which channel is mapped to CD4\nCD4_chan <- flowCore::getChannelMarker(\n  frm = cf,\n  name = \"CD4\"\n)$name\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in flowCore::getChannelMarker(frm = cf, name = \"CD4\"): CD4 is partially\nmatched with U500-ACD40 BUV496\n```\n:::\n\n```{.r .cell-code}\n# inspect CD4_chan\nCD4_chan\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"U500-A\"\n```\n:::\n\n```{.r .cell-code}\n# extract expression of cd4\ne_cd4 <- exprs(cf[, CD4_chan])\nhead(e_cd4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        U500-A\n[1,] 1422.2137\n[2,]  199.7638\n[3,]  344.7379\n[4,] 2167.5317\n[5,]  285.1899\n[6,]  152.0994\n```\n:::\n\n```{.r .cell-code}\n# subset cytorame by column\ns_cf <- cf[, CD4_chan]\ns_cf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncytoframe object '4000_BDC-CR1.fcs'\nwith 912254 cells and 1 observables:\n       name        desc     range  minRange  maxRange\n$P19 U500-A CD40 BUV496    262143      -111    262143\n327 keywords are stored in the 'description' slot\nrow names(0):\ncytoframe has been subsetted and can be realized through 'realize_view()'.\n```\n:::\n\n```{.r .cell-code}\n# subset cytoframe by row\ns2_cf <- cf[1:100, ]\ns2_cf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncytoframe object '4000_BDC-CR1.fcs'\nwith 100 cells and 33 observables:\n                  name         desc     range  minRange  maxRange\n$P1              FSC-A           NA    262143     0.000    262143\n$P2              FSC-H           NA    262143     0.000    262143\n$P3              SSC-A           NA    262143     0.000    262143\n$P4             B515-A   CADM1 FITC    262143  -110.386    262143\n$P5             B610-A  CD141 BB630    262143  -111.000    262143\n...                ...          ...       ...       ...       ...\n$P29            V710-A   CD86 BV711    262143      -111    262143\n$P30            V750-A CX3CR1 BV750    262143      -111    262143\n$P31            V785-A HLA-DR BV786    262143      -111    262143\n$P32 remove_from_FS_FM           QC    262143         0    262143\n$P33              Time           NA        92         0        92\n327 keywords are stored in the 'description' slot\nrow names(0):\ncytoframe has been subsetted and can be realized through 'realize_view()'.\n```\n:::\n:::\n\n\nNotice that the subset (`[]`) operation can be applied directly to the `cytoframe` object so that information regarding the file is preserved. Also, as indicated above, these operations provide an aliased view of the data without creating a **copy**.\n\nBelow, we show examples of how to manipulate the `cytoframe` object and create a copy using `realize_view()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a new markername\nnew_name <- c(\"U785-A\" = \"test\")\n\n# create a new cytoframe subset\ncf_sub <- cf[1:150, ] |> realize_view() # realize_view creates a new cytoframe, distinct from the original\n\n# old markernames\nmarkernames(cf_sub)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             B515-A              B610-A              B660-A              B710-A \n       \"CADM1 FITC\"       \"CD141 BB630\"       \"CD123 BB660\"      \"FcER1a BB700\" \n             B780-A              G575-A              G610-A              G660-A \n        \"IgD BB790\"         \"IFNAR2 PE\" \"CD88 PE-Dazzle594\"        \"CD3 PE-Cy5\" \n             G710-A              G780-A              R670-A              R730-A \n      \"CD5 PE-Cy55\"       \"CCR1 PE-Cy7\"         \"CD11c APC\"     \"CD27 APC-R700\" \n             R780-A              U390-A              U450-A              U500-A \n \"XCR1 APC-Fire750\"       \"CCR3 BUV395\" \"Live Dead UV Blue\"       \"CD40 BUV496\" \n             U570-A              U660-A              U740-A              U785-A \n      \"CD56 BUV563\"       \"CD21 BUV661\"      \"CD163 BUV737\"       \"CD20 BUV805\" \n             V450-A              V510-A              V570-A              V605-A \n       \"CCR2 BV421\"        \"CD14 BV510\"        \"CD16 BV570\"        \"CD38 BV605\" \n             V655-A              V710-A              V750-A              V785-A \n       \"CCR5 BV650\"        \"CD86 BV711\"      \"CX3CR1 BV750\"      \"HLA-DR BV786\" \n  remove_from_FS_FM \n               \"QC\" \n```\n:::\n\n```{.r .cell-code}\n# set new markername\nmarkernames(cf_sub) <- new_name\nmarkernames(cf_sub)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             B515-A              B610-A              B660-A              B710-A \n       \"CADM1 FITC\"       \"CD141 BB630\"       \"CD123 BB660\"      \"FcER1a BB700\" \n             B780-A              G575-A              G610-A              G660-A \n        \"IgD BB790\"         \"IFNAR2 PE\" \"CD88 PE-Dazzle594\"        \"CD3 PE-Cy5\" \n             G710-A              G780-A              R670-A              R730-A \n      \"CD5 PE-Cy55\"       \"CCR1 PE-Cy7\"         \"CD11c APC\"     \"CD27 APC-R700\" \n             R780-A              U390-A              U450-A              U500-A \n \"XCR1 APC-Fire750\"       \"CCR3 BUV395\" \"Live Dead UV Blue\"       \"CD40 BUV496\" \n             U570-A              U660-A              U740-A              U785-A \n      \"CD56 BUV563\"       \"CD21 BUV661\"      \"CD163 BUV737\"              \"test\" \n             V450-A              V510-A              V570-A              V605-A \n       \"CCR2 BV421\"        \"CD14 BV510\"        \"CD16 BV570\"        \"CD38 BV605\" \n             V655-A              V710-A              V750-A              V785-A \n       \"CCR5 BV650\"        \"CD86 BV711\"      \"CX3CR1 BV750\"      \"HLA-DR BV786\" \n  remove_from_FS_FM \n               \"QC\" \n```\n:::\n\n```{.r .cell-code}\n# manipulating expression values\n# notice the data range \nrange(cf_sub[, \"U785-A\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    U785-A\nmin   -111\nmax 262143\n```\n:::\n\n```{.r .cell-code}\n# visualise original channel ditribution\nplot(\n  density(\n    exprs(cf_sub[, \"U785-A\"])\n  ),\n  main = \"U785-A\"\n)\n```\n\n::: {.cell-output-display}\n![](1_Import_fcs_files/figure-html/manipulate_flowFrame-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# asinh transform\nexprs(cf_sub)[, \"U785-A\"] <- asinh(exprs(cf_sub)[, \"U785-A\"])\n\n# notice the data range after transformation\nrange(\n  cf_sub[, \"U785-A\"],\n  type = \"instrument\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    U785-A\nmin   -111\nmax 262143\n```\n:::\n\n```{.r .cell-code}\n# visualise channel distribution\nplot(\n  density(\n    exprs(cf_sub[, \"U785-A\"])\n  ),\n  main = \"U785-A\"\n)\n```\n\n::: {.cell-output-display}\n![](1_Import_fcs_files/figure-html/manipulate_flowFrame-2.png){width=672}\n:::\n:::\n\n\nNotice that the data range summary was not updated when we used `<-` to change the underlying expression matrix. A good practice is to use `transform` function to transform the underlying expression matrix. Importantly, `transform` also updates the data range summary. Moreover, `transform` can also be used to add new columns to the `cytoframe`.\n\n*Note*: We will go over `transformations` in a later section.\n\n### Basic plots using `flowViz` package\n\n`flowViz` package provide functions and methods to visualize flow cytometry data. This package heavily depends on the flowCore package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(flowViz)\n```\n:::\n\n\n#### Examples\n\nIf the object has only a single parameter this produces a histogram. To select specific parameters from a flowFrame for plotting, either subset the object or specify the parameters as a character vector as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(cf, c(\"FSC-A\"))\n```\n\n::: {.cell-output-display}\n![](1_Import_fcs_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nFor exactly two parameters this plots a [bivariate density map](https://en.wikipedia.org/wiki/Multivariate_map#:~:text=A%20bivariate%20map%20or%20multivariate,%2C%20cartogram%2C%20or%20proportional%20symbols).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(cf, c(\"FSC-A\", \"SSC-A\"))\n```\n\n::: {.cell-output-display}\n![](1_Import_fcs_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nFor more than two parameters this produce a simple scatter plots matrix (splom). The smooth parameters lets you toggle between density-type smoothScatter plots and regular scatterplots. For far more sophisticated plotting of flow cytometry data, ggcyto package is used generally (will be discussed later).\n\nFor multiple parameters,\n\n\n::: {.cell hash='1_Import_fcs_cache/html/unnamed-chunk-7_c339ba8ef77bab67dad01d0c59d8d12d'}\n\n```{.r .cell-code}\nall_param = dput(colnames(cf)[6:8])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nc(\"B660-A\", \"B710-A\", \"B780-A\")\n```\n:::\n\n```{.r .cell-code}\nplot(cf, all_param)\n```\n\n::: {.cell-output-display}\n![](1_Import_fcs_files/figure-html/unnamed-chunk-7-1.png){width=1152}\n:::\n:::\n\n\n## Reading a set of FCS files\n\nIn a experimental sense, a single **.fcs** file is not very interesting, since this represents only a single sample. To draw any conclusions, we'll want replicates. When there are a set of **.fcs** files they can be loaded into R either as a `cytoset` or `flowSet`.\n\n**cytoset/flowSet**: A collection of **.fcs** files, preferably, but not necessarily from the same panel/experiment.\n\n### Reading a set of FCS files as a `cytoset`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncs <- load_cytoset_from_fcs(path = \"data/fcs-data/\")\ncs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA cytoset with 6 samples.\n\n  column names:\n    FSC-A, FSC-H, SSC-A, B515-A, B610-A, B660-A, B710-A, B780-A, G575-A, G610-A, G660-A, G710-A, G780-A, R670-A, R730-A, R780-A, U390-A, U450-A, U500-A, U570-A, U660-A, U740-A, U785-A, V450-A, V510-A, V570-A, V605-A, V655-A, V710-A, V750-A, V785-A, remove_from_FS_FM, Time\n```\n:::\n:::\n\n\n### Reading a set of FCS files as a `flowSet`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nframes <- lapply(dir(\"data/fcs-data/\", full.names=TRUE), read.FCS)\nfs <- as(frames, \"flowSet\") \nfs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA flowSet with 6 experiments.\n\ncolumn names(33): FSC-A FSC-H ... remove_from_FS_FM Time\n```\n:::\n:::\n\nA `cytoset`/`flowSet` can also be indexed with square brackets `cs[i,j]`, however now the row index `i` selects samples (**individual FCS files**) rather than cells. A `cytoset`/`flowSet` also behaves like a list -- a double bracket `cs[[i]]` selects a single sample as a `cytoframe`/`flowFrame`.\n\nGenerally, each FCS file replicate has unique metadata properties that can (**and should**) be supplied to the `cytoset`/`flowSet`. These can be added after loading the `cytoset`/`flowSet` by using `pData(x) <- data.frame`. The `rownames` of the data.frame **must match** the `sampleNames` of the `cytoset`/`flowSet`.\n\n::: callout-note\nThe primary difference between the `cytoset` and `flowSet` classes is in the underlying representation of the data. Because `cytoset` is a reference class, copying or subsetting a `cytoset` object will return a `cytoset` pointing to the same underlying data. A deep copy of the data can be obtained via the realize_view method as before.\n\nThere is one notable exception to the typical behavior of most methods returning a `cytoframe`. The standard extraction operator (`[[]]`) will by default perform a deep copy of the subset being extracted and return a `flowFrame`. \n:::\n\n**Here onwards, we focus on examples involving the `cytoset` object, with the majority of the content dedicated to exploring and understanding this specific data structure.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# prior to providing metadata\npData(cs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                             name\n4000_BDC-CR1.fcs 4000_BDC-CR1.fcs\n4000_TNK-CR1.fcs 4000_TNK-CR1.fcs\n4001_BDC-CR1.fcs 4001_BDC-CR1.fcs\n4001_TNK-CR1.fcs 4001_TNK-CR1.fcs\n4002_TNK-CR1.fcs 4002_TNK-CR1.fcs\n4003_TNK-CR1.fcs 4003_TNK-CR1.fcs\n```\n:::\n\n```{.r .cell-code}\n# create metadata\nmetadata <- data.frame(\n  Treatment = rep(c(\"Untreated\",\"Treated\"),\n    length.out = length(cs)\n  ),\n  panel = ifelse(\n    grepl(\n      pattern = \"TNK\",\n      x = sampleNames(cs)\n    ),\n    \"T Cell Panel\",\n    \"Myeloid Panel\"\n  )\n)\n```\n:::\n\n\nLet's see what happens when `rownames` do not match!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# try to add metadata  -- this leads to an error\npData(cs) <- metadata\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: Invalid input type, expected 'character' actual 'integer'\n```\n:::\n:::\n\n\nNow, we ensure that `rownames` of data.frame matches `sampleNames` of the `cytoset`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# now it works\nrow.names(metadata) <- sampleNames(cs)\npData(cs) <- metadata\npData(cs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         panel Treatment\n4000_BDC-CR1.fcs Myeloid Panel Untreated\n4000_TNK-CR1.fcs  T Cell Panel   Treated\n4001_BDC-CR1.fcs Myeloid Panel Untreated\n4001_TNK-CR1.fcs  T Cell Panel   Treated\n4002_TNK-CR1.fcs  T Cell Panel Untreated\n4003_TNK-CR1.fcs  T Cell Panel   Treated\n```\n:::\n:::\n\n\nThe benefit of having metadata is that we can use many of the sub-setting operations in a metadata specific manner.\n\nThis is much more convenient than going back and forth between the full set of files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# subset by files that have myeloid staining panel without creating a copy of the data\ncs_myeloid <- cs[pData(cs)[[\"panel\"]] == \"Myeloid Panel\",]\n\ncs_myeloid\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA cytoset with 2 samples.\n\n  column names:\n    FSC-A, FSC-H, SSC-A, B515-A, B610-A, B660-A, B710-A, B780-A, G575-A, G610-A, G660-A, G710-A, G780-A, R670-A, R730-A, R780-A, U390-A, U450-A, U500-A, U570-A, U660-A, U740-A, U785-A, V450-A, V510-A, V570-A, V605-A, V655-A, V710-A, V750-A, V785-A, remove_from_FS_FM, Time\n```\n:::\n\n```{.r .cell-code}\npData(cs_myeloid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         panel Treatment\n4000_BDC-CR1.fcs Myeloid Panel Untreated\n4001_BDC-CR1.fcs Myeloid Panel Untreated\n```\n:::\n:::\n\n\n### Cytoset views and aliasing\n\nMany of the sub-setting operation for `cytoframe` are also applicable for `cytoset`. Similar to `cytoframe` sub-setting operations only create a new \"view\" of the data. For a complete copy of the data, `realize_view` should be used.\n\nBelow is an example of `cytoset` sub-setting which also highlights how the operations performed on `cytoset` affects the underlying data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# demonstrate how cs point to the same underlying data\nrange(cs[[1, \"B515-A\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         B515-A\nmin   -110.3859\nmax 262143.0000\n```\n:::\n\n```{.r .cell-code}\n# subset and show prior to transformation\ncs_small <- cs[1]\nrange(cs_small[[1, \"B515-A\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         B515-A\nmin   -110.3859\nmax 262143.0000\n```\n:::\n\n```{.r .cell-code}\n# create a transformList\ntrans <- transformList(\"B515-A\",asinh)\n\n# transform\ncs_small <- transform(cs_small,trans)\n\n# after transformation\nrange(cs_small[[1, \"B515-A\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       B515-A\nmin -5.397151\nmax 13.169792\n```\n:::\n\n```{.r .cell-code}\n# whole cs \nrange(cs[[1, \"B515-A\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       B515-A\nmin -5.397151\nmax 13.169792\n```\n:::\n:::\n\n\nAs you see, the transformation was applied to a subset `cs_small` however the original `cs` was also altered highlighting that both objects were pointing to the same data. To confirm this, you can use `cs_get_uri` or `cf_get_uri`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncs_get_uri(cs_small)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/private/var/folders/qh/8vgbq6dn4z33m1shwsbvqfq40000gn/T/RtmphhRdec/af35ee6d-28ab-401f-bab5-7017052fb98d\"\n```\n:::\n\n```{.r .cell-code}\ncs_get_uri(cs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/private/var/folders/qh/8vgbq6dn4z33m1shwsbvqfq40000gn/T/RtmphhRdec/af35ee6d-28ab-401f-bab5-7017052fb98d\"\n```\n:::\n:::\n\n\nTo perform a **deep copy** we can use `realize_view()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# look at underlying expression\nrange(cs[[2, \"B515-A\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          B515-A\nmin    -15.63437\nmax 262143.00000\n```\n:::\n\n```{.r .cell-code}\n# subset and show prior to transformation\ncs_small2 <- realize_view(cs[2])\nrange(cs_small2[[1, \"B515-A\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          B515-A\nmin    -15.63437\nmax 262143.00000\n```\n:::\n\n```{.r .cell-code}\n# create a transformList\ntrans <- transformList(\"B515-A\",asinh)\n\n# transform\ncs_small2 <- transform(cs_small2,trans)\n\n# after transformation\nrange(cs_small2[[1, \"B515-A\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      B515-A\nmin -3.44364\nmax 13.16979\n```\n:::\n\n```{.r .cell-code}\n# whole cs \nrange(cs[[2, \"B515-A\"]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          B515-A\nmin    -15.63437\nmax 262143.00000\n```\n:::\n:::\n\n\nNotice that `cs` is left unchanged.\n\n### Adding additional **.fcs** files to `cytoset`\n\nLastly, we can also add additional **.fcs** files to a `cytoset` using `cs_add_cytoframe`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add to cytoset\ncs_small <- realize_view(cs[1]) # cs[1] subsets cs into a cytoset while realize_view leads to a deep_copy into a new cytoset\ncs_small\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA cytoset with 1 samples.\n\n  column names:\n    FSC-A, FSC-H, SSC-A, B515-A, B610-A, B660-A, B710-A, B780-A, G575-A, G610-A, G660-A, G710-A, G780-A, R670-A, R730-A, R780-A, U390-A, U450-A, U500-A, U570-A, U660-A, U740-A, U785-A, V450-A, V510-A, V570-A, V605-A, V655-A, V710-A, V750-A, V785-A, remove_from_FS_FM, Time\n```\n:::\n\n```{.r .cell-code}\n# no need to assign back to cs_small, because this function operates by reference and returns NULL anyways.\ncs_add_cytoframe(\n  cs = cs_small,\n  sn = \"Sample Name\",\n  cf = cs[[3]]   # cs[[3]] results in a cytoframe\n) \ncs_small\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA cytoset with 2 samples.\n\n  column names:\n    FSC-A, FSC-H, SSC-A, B515-A, B610-A, B660-A, B710-A, B780-A, G575-A, G610-A, G660-A, G710-A, G780-A, R670-A, R730-A, R780-A, U390-A, U450-A, U500-A, U570-A, U660-A, U740-A, U785-A, V450-A, V510-A, V570-A, V605-A, V655-A, V710-A, V750-A, V785-A, remove_from_FS_FM, Time\n```\n:::\n:::\n\n\n### From `cytoset` to `cytoframe`\n\nIt is possible that you may want to extract a `cytoframe` or extract all files as a list of `cytoframe`. We can either use `[[` to directly grab a `cytoframe` or `cytoset_to_list`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract a single cytoframe by using cs[[index/samplename]]\nsingle_cf <- cs[[1]]\n\n# convert to a list\nlist_of_cf <- cytoset_to_list(cs) \n```\n:::\n\n\n## List like operation with `cytoset`\n\nAs indicated previously, a `cytoset` behaves like a list. To leverage this behaviour we can use `fsApply` to iterate through the samples in a `cytoset`. By default, output is attempted to be coerced to a single array like object. (Set `simplify = FALSE` to return another list.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# getting number of rows (cells) of individual cytoframes\nn_cell_events <- fsApply(cs, nrow)\nn_cell_events\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   [,1]\n4000_BDC-CR1.fcs 912254\n4000_TNK-CR1.fcs 102015\n4001_BDC-CR1.fcs 924474\n4001_TNK-CR1.fcs  92703\n4002_TNK-CR1.fcs 372224\n4003_TNK-CR1.fcs 146150\n```\n:::\n:::\n\n\n## Saving your data\n\nSaving your data is easy.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# save cytoframe\ncf_write_disk(cf, \"path/to/my_new_cf\")\n\n# save cytoset\nsave_cytoset(cs, path = \"path/to/my/cs\")\n```\n:::\n\n\nLoading it back is just as easy.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load cytoframe\nload_cytoframe(\"path/to/my_cf\")\n\n# load cytoset\nload_cytoset(\"path/to/my/cs\")\n```\n:::\n\n\n## Conclusion\n\nWe went through multiple ways to import, interact with, and manipulate **.fcs** files using the `cytoverse` tools. It is important to note additional functionality, *which we will not going to go over at this workshop for the sake of time*, for further manipulation and even creation of **.fcs** files exist with the `cytoverse`. We encourage you to explore them further at your leisure by calling `browseVignettes(\"flowWorkspace\")`.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}